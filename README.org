# -*- ii: enabled; -*-
#+TITLE: kubemacs

#+ATTR_HTML: :alt Kubemacs logo
#+ATTR_HTML: :width 100 :style border:2px solid black;
#+HTML: <img src="./assets/Kubemacs-draft-logo.png" width="100"/>

* Kubemacs
#+BEGIN_QUOTE
An integrated emacs+spacemacs-based development environment, capable of local and cloud-based workflows.
#+END_QUOTE

** Features
  * Efficient and modular base of emacs

** Installing
*** macOS
1. Install [[https://brew.sh/][Brew]]
2. Install Apps
    #+begin_src shell
    brew install tmux tmate jq kubectl kind the_silver_searcher ripgrep go@1.14
    brew cask install emacs emacsclient iterm2 docker
    #+end_src
3. Clone Kubemacs into emacs site-lisp
    #+begin_src shell
    EMACS_SITE_LISP=/Applications/Emacs.app/Contents/Resources/site-lisp/kubemacs
    git clone --recursive https://github.com/kubemacs/kubemacs.git $EMACS_SITE_LISP
    #+end_src

*** Windows


*** Linux (Flatpak) (COMING SOON)
1. Install [[https://flatpak.org/setup/][Flatpak]]
2. Go to [[https://flathub.org/apps/details/coop.ii.kubemacs][FlatHub.org]] to install or
    #+begin_src shell
    flatpak install flathub coop.ii.kubemacs
    #+end_src
3. Launch from the app launcher (desktop mode) or
    #+begin_src shell
    # -nw says to emacs to launch in terminal mode
    flatpak run coop.ii.kubemacs -nw
    #+end_src

*** Kubernetes
    #+begin_src shell
    kubectl create namespace ii
    kubectl -n ii apply -f manifests
    #+end_src

*** Kind
First, create a config file in your home directory called .kubemacs-env, the contents something like:
    #+begin_src shell
      # Kubemacs image version you which to deploy
      KUBEMACS_IMAGE=kubemacs/kubemacs:latest
      # Value must match `id -u` output
      HOST_UID="1000"
      # Your public email for Git
      KUBEMACS_GIT_EMAIL=myemail@example.com
      # Your name
      KUBEMACS_GIT_NAME="John Smith"
      # Your timezone
      KUBEMACS_TIMEZONE=Pacific/Auckland
      # The kubeconfig file name to write to, in ~/.kube
      KUBEMACS_HOST_KUBECONFIG_NAME=config
      # Using a docker registry alongside kind
      KIND_LOCAL_REGISTRY_ENABLE=true
      # Give your registry a name in Docker
      KIND_LOCAL_REGISTRY_NAME=local-registry
      # The port to serve your registry on
      KIND_LOCAL_REGISTRY_PORT=5000
      # A main folder to store all your git repos; defaults to home
      KUBEMACS_INIT_DEFAULT_REPOS_FOLDER=Projects
      # The repositories to check out
      KUBEMACS_INIT_DEFAULT_REPOS='https://github.com/kubemacs/kubemacs https://github.com/kubernetes/kubernetes'
      # The folder to start tmate/emacs in
      KUBEMACS_INIT_DEFAULT_DIR=Projects/kubemacs
      # The first file you want emacs to open
      KUBEMACS_INIT_ORG_FILE=Projects/kubemacs/README.org
      # Set the default deployment namespace
      KUBEMACS_INIT_DEFAULT_NAMESPACE=ii
      # Set commands to run on before emacs launches
      KUBEMACS_INIT_PREFINISH_BLOCK="(git --git-dir=$INIT_DEFAULT_REPOS_FOLDER/kubernetes/.git remote add ii git@github.com:ii/kubernetes.git; git --git-dir=$INIT_DEFAULT_REPOS_FOLDER/kubemacs/.git remote add bobymcbobs git@github.com:bobymcbobs/kubemacs.git);"    
      # Set to true to emacs
      KUBEMACS_INIT_DEBUG=false
    #+end_src

    Initialize the environment:
    #+begin_src shell
    ENV_FILE=$HOME/.kubemacs-env
    . $ENV_FILE
    docker run \
      --env-file $ENV_FILE \
      -v "$HOME/.kube:/tmp/.kube" \
      -v /var/run/docker.sock:/var/run/docker.sock \
      --user root \
      --privileged \
      --network host \
      --name kubemacs-docker-init \
      --rm \
      -it \
      $KUBEMACS_IMAGE
    #+end_src

*** Docker (any platform)
#+begin_src shell
docker run -it --rm --name kubemacs -e GIT_AUTHOR_NAME='Caleb Woodbine' -e GIT_AUTHOR_EMAIL='caleb@ii.coop' kubemacs/kubemacs:latest
#+end_src
**** Additional options
***** Allow docker access
      #+begin_src shell
      -v /var/run/docker.sock:/var/run/docker.sock
      #+end_src
***** Have persistent data in the workspace folder
      #+begin_src shell
      -v /home/MYUSER:/home/ii/workspace
      #+end_src

** Usage


** License

